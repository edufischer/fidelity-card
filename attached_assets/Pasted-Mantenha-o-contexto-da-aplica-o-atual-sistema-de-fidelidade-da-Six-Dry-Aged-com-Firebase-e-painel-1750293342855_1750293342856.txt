Mantenha o contexto da aplica√ß√£o atual (sistema de fidelidade da Six Dry Aged, com Firebase e painel em React com TypeScript). Agora, implemente o sistema completo de cupons da seguinte forma:

---

## üß© Parte 1 ‚Äì Gera√ß√£o autom√°tica de cupons ao atingir 10 carimbos

Sempre que um cliente acumular 10 ou mais carimbos ao registrar uma compra, siga esta l√≥gica:

1. Crie automaticamente um novo cupom na cole√ß√£o `cupons` do Firestore.
2. O cupom deve conter os seguintes campos:
   - clienteCpf (string)
   - valorDesconto (number ‚Üí 0.15)  
   - usado (boolean ‚Üí false)
   - criadoEm (timestamp ‚Üí use serverTimestamp())
   - validoAte (timestamp ‚Üí 30 dias a partir da data atual)
3. Ap√≥s salvar com sucesso o cupom, zere o n√∫mero de carimbos do cliente.
4. Mostre um `toast.success()` com a mensagem:  
   **"üéâ Cliente atingiu 10 carimbos! Cupom de 15% gerado."**
5. Para compras abaixo de 10 carimbos, mantenha o comportamento atual de apenas acumular carimbos.

‚ö†Ô∏è OBS:  
- A fun√ß√£o `gerarCupom(clienteCpf: string)` j√° existe no arquivo `/lib/firebaseCupom.ts`
- O c√≥digo principal est√° no componente `AdminDashboard.tsx`

---

## üß© Parte 2 ‚Äì Criar visualiza√ß√£o de cupons no painel administrativo

Adicione uma **nova aba ou se√ß√£o chamada "Cupons"** no `AdminDashboard.tsx`, semelhante √†s abas de "Clientes" e "Compras". Nela, crie uma tabela que exibe todos os cupons salvos no Firestore.

### Colunas da tabela:
- **CPF** (`clienteCpf`)
- **Data de cria√ß√£o** (`criadoEm` formatado dd/mm/yyyy)
- **Validade at√©** (`validoAte` formatado dd/mm/yyyy)
- **Status**: mostre como "Ativo" (verde) se `usado: false`, ou "Usado" (vermelho/cinza) se `usado: true`
- **A√ß√µes**: bot√£o "Marcar como usado" ‚Üí ao clicar, atualiza o campo `usado` para `true` no Firestore

### Requisitos:
- Ordenar os cupons do mais recente para o mais antigo
- Usar `useEffect` para buscar os cupons do Firestore
- Adicionar uma pequena anima√ß√£o de loading enquanto carrega
- Interface bonita, com Tailwind CSS, responsiva e alinhada com o restante do painel
- O bot√£o de "Marcar como usado" deve funcionar via update no Firestore

### (Extra, se poss√≠vel):
- Campo de filtro por CPF acima da tabela, que filtra os cupons daquele cliente
- Badge de cor para o status (verde para Ativo, cinza/vermelho para Usado)

---

## üß© Parte 3 ‚Äì CORRE√á√ÉO CR√çTICA: Erro na consulta de fidelidade

**PROBLEMA IDENTIFICADO**: A p√°gina de consultar fidelidade est√° apresentando erro de √≠ndice no Firestore e retornando "cliente n√£o encontrado" mesmo para CPFs v√°lidos existentes no banco.

### Corre√ß√µes necess√°rias:

#### 3.1 - Verificar e corrigir a consulta no Firestore
No arquivo onde est√° a fun√ß√£o de consulta de cliente (provavelmente `/lib/firebase.ts` ou similar), **identifique e corrija** a query que busca clientes por CPF:

```typescript
// ‚ùå EVITAR queries complexas que precisam de √≠ndice
// Se estiver usando algo como:
// query(collection(db, "clientes"), where("cpf", "==", cpf), orderBy("criadoEm"))

// ‚úÖ USAR consulta simples por CPF apenas:
const consultarClientePorCpf = async (cpf: string) => {
  try {
    const clientesRef = collection(db, "clientes");
    const q = query(clientesRef, where("cpf", "==", cpf));
    const querySnapshot = await getDocs(q);
    
    if (querySnapshot.empty) {
      return null;
    }
    
    const doc = querySnapshot.docs[0];
    return { id: doc.id, ...doc.data() };
  } catch (error) {
    console.error("Erro ao consultar cliente:", error);
    throw error;
  }
};
```

#### 3.2 - Criar √≠ndices necess√°rios no Firestore (se realmente precisar de queries complexas)
Se a aplica√ß√£o precisar de queries com m√∫ltiplos filtros, **adicione estas instru√ß√µes**:

1. **Acesse o Console do Firebase** ‚Üí Firestore Database ‚Üí Indexes
2. **Crie os √≠ndices necess√°rios** conforme os campos que voc√™ est√° consultando
3. **OU simplifique as queries** para usar apenas um campo por vez

#### 3.3 - Implementar fallback e melhor tratamento de erros
```typescript
// Adicionar tratamento robusto na fun√ß√£o de consulta
const consultarFidelidade = async (cpf: string) => {
  try {
    // Limpar e formatar CPF
    const cpfLimpo = cpf.replace(/\D/g, '');
    
    // Tentar busca exata primeiro
    let cliente = await consultarClientePorCpf(cpfLimpo);
    
    // Se n√£o encontrar, tentar busca alternativa
    if (!cliente && cpfLimpo.length === 11) {
      // Tentar com CPF formatado: 000.000.000-00
      const cpfFormatado = cpfLimpo.replace(/(\d{3})(\d{3})(\d{3})(\d{2})/, '$1.$2.$3-$4');
      cliente = await consultarClientePorCpf(cpfFormatado);
    }
    
    return cliente;
  } catch (error) {
    console.error("Erro na consulta de fidelidade:", error);
    return null;
  }
};
```

#### 3.4 - Verificar componente de consulta
No componente que renderiza a p√°gina de consulta de fidelidade:

1. **Adicionar loading state** durante a consulta
2. **Melhorar mensagens de erro** (ex: "CPF n√£o encontrado", "Erro na consulta", etc.)
3. **Validar formato do CPF** antes de enviar para o Firebase
4. **Adicionar retry autom√°tico** em caso de erro tempor√°rio

#### 3.5 - Debug e logs
Adicione logs tempor√°rios para identificar onde est√° o problema:

```typescript
console.log("CPF digitado:", cpf);
console.log("CPF formatado:", cpfLimpo);
console.log("Resultado da consulta:", cliente);
```

---

## üß© Instru√ß√µes Finais

‚úÖ **Mantenha a arquitetura** do projeto como est√° (componentes bem organizados, Firebase centralizado, etc). Tudo precisa continuar funcionando normalmente ap√≥s as mudan√ßas.

‚úÖ **Use os arquivos e pastas existentes** corretamente, como `/components/ui/AdminDashboard.tsx`, `/lib/firebase.ts`, e `/lib/firebaseCupom.ts`.

‚úÖ **N√£o repita ou sobrescreva fun√ß√µes** que j√° existem ‚Äî apenas evolua mantendo compatibilidade com o c√≥digo atual.

‚úÖ **PRIORIZE a corre√ß√£o do erro de consulta** antes de implementar os cupons, pois isso est√° quebrado no momento.

‚úÖ **Teste a consulta de fidelidade** ap√≥s as corre√ß√µes para garantir que CPFs v√°lidos sejam encontrados corretamente.

Execute as mudan√ßas com cuidado e mantenha o painel est√°vel, bonito e funcional. **Comece pela corre√ß√£o do erro de consulta**, depois implemente o sistema de cupons.